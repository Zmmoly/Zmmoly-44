apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'

android {
    compileSdkVersion 33
    buildToolsVersion "30.0.3"

    defaultConfig {
        applicationId "com.zamouli.aiassistant"
        minSdkVersion 23
        targetSdkVersion 33
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

// مهمة لتنزيل نماذج التعلم الآلي
task downloadMLModels(type: Exec) {
    // تعيين المجلد الحالي لتشغيل السكريبت
    workingDir project.rootDir
    
    // تحقق من نظام التشغيل لتحديد طريقة تشغيل Python
    def isWindows = System.getProperty('os.name').toLowerCase().contains('windows')
    
    if (isWindows) {
        // أمر CMD لتشغيل السكريبت على Windows
        commandLine 'cmd', '/c', 'python', "${project.projectDir}/script/setup_and_download.py", "${project.rootDir}"
    } else {
        // أمر Shell لتشغيل السكريبت على Linux/Mac
        commandLine 'python3', "${project.projectDir}/script/setup_and_download.py", "${project.rootDir}"
    }
    
    // ضبط سلوك الخطأ - سنتجاهل الأخطاء للسماح بمواصلة البناء حتى لو فشل تنزيل بعض النماذج
    ignoreExitValue = true
    
    // تسجيل معلومات حول المهمة
    doFirst {
        println "🔄 بدء تنزيل نماذج الذكاء الاصطناعي..."
        println "ℹ️ ملاحظة: إذا كان لديك أية مشاكل، قم بتشغيل سكريبت التهيئة:"
        if (isWindows) {
            println "   ${project.projectDir}/script/setup_windows.bat"
        } else {
            println "   ${project.projectDir}/script/setup_unix.sh"
        }
    }
    
    doLast {
        println "✅ اكتمل تنفيذ سكريبت تنزيل النماذج"
    }
}

// إضافة مهمة التنزيل إلى مهام البناء
tasks.whenTaskAdded { task ->
    // إضافة المهمة قبل مهمات البناء الرئيسية
    if (task.name == 'processDebugResources' || 
        task.name == 'processReleaseResources' ||
        task.name == 'assembleDebug' ||
        task.name == 'assembleRelease') {
        task.dependsOn downloadMLModels
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.core:core-ktx:1.8.0'
    implementation 'androidx.appcompat:appcompat:1.5.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'com.google.android.material:material:1.6.1'
    
    // TensorFlow Lite
    implementation 'org.tensorflow:tensorflow-lite:2.9.0'
    implementation 'org.tensorflow:tensorflow-lite-support:0.4.2'
    implementation 'org.tensorflow:tensorflow-lite-metadata:0.4.2'
    
    // ML Kit
    implementation 'com.google.mlkit:language-id:17.0.3'
    
    // Testing
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
}